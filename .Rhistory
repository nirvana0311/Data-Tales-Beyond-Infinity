SPBT<-ggplot(data=pp,aes(x=BUILDTYPE,y=SALES_PRICE/1000))+geom_bar(width=0.5,stat="Identity",color="darkblue")
SPISBT<-ggplot(data=pp,aes(x=INT_SQFT,y=SALES_PRICE/1000,col=BUILDTYPE))+geom_jitter(size=1)
grob2<-list(SPBT,SPISBT)
marrangeGrob(grob2,nrow = 1,ncol =1)
levels(pp$UTILITY_AVAIL)
levels(pp$UTILITY_AVAIL)[1]<-levels(pp$UTILITY_AVAIL)[2]
SPUA<-sqldf("select UTILITY_AVAIL,avg(SALES_PRICE) as SP from pp group by UTILITY_AVAIL ")
SPUA_br<-ggplot(data=SPUA,aes(x=UTILITY_AVAIL,y=SP/1000))+geom_bar(width=0.5,stat="Identity",fill="darkblue")
SPUABT<-sqldf("select UTILITY_AVAIL,avg(SALES_PRICE) as SP,BUILDTYPE from pp group by UTILITY_AVAIL,BUILDTYPE ")
SPUABT_br<-ggplot(data=pp,aes(x=UTILITY_AVAIL,y=SALES_PRICE/1000,fill=BUILDTYPE))+geom_bar(width=0.5,stat="Identity")
grob4<-list(SPUA_br,SPUABT_br)
marrangeGrob(grob4,nrow = 2,ncol =1)
pp$STREET<-as.character(pp$STREET)
unique(pp$STREET)
pp<-pp %>% mutate(STREET=ifelse(STREET=="No Access",yes="NoAccess",no=STREET))
pp<-pp %>% mutate(STREET=ifelse(STREET=="Pavd",yes="Paved",no=STREET))
pp$STREET<-as.factor(pp$STREET)
library(sqldf)
table(pp$MZZONE)
SPMZ<-sqldf("select MZZONE,avg(SALES_PRICE) as SP  from pp group by MZZONE ")
SPMZ_br<-ggplot(data=SPMZ,aes(x=MZZONE,y=SP/1000))+geom_bar(fill="darkblue",stat = "Identity",width = 0.5)
SPISMZ<-ggplot(data=pp,aes(x=INT_SQFT,y=SALES_PRICE/1000,col=MZZONE))+geom_jitter(size=1)
grob5<-list(SPMZ_br,SPISMZ)
marrangeGrob(grob5,nrow = 1,ncol =1)
par(mfrow=c(2,2))
hist(pp$QS_ROOMS,col = "red")
hist(pp$QS_BATHROOM,col = "blue")
hist(pp$QS_BEDROOM,col = "red")
hist(pp$QS_OVERALL,col = "blue")
pp$avg_sqft<-pp$INT_SQFT/pp$N_ROOM
summary(pp$avg_sqft)
par(mfrow=c(1,2))
hist(pp$avg_sqft,col="blue")
hist(sqrt(pp$avg_sqft),col="red")
summary(pp$QS_OVERALL)
pp[is.na(pp$QS_OVERALL),]
pp$avg_qly<-apply(X = pp[15:17],MARGIN = 1,mean)
cor(x =pp[,23],y = pp[,18],use = "complete.obs")
ggplot(data=pp,aes(x=avg_qly))+geom_histogram(fill="darkblue",bins = 50)
set.seed(290391)
library(mice)
imp_pp_qly<-mice(pp[,c(18,23)],method = "norm.boot",m = 10,maxit=10,seed = 290391)
imp_pp_qly<-complete(imp_pp_qly)
pp[,c(18)]<-imp_pp_qly$QS_OVERALL
summary(pp$REG_FEE)
cor(x =pp[,21],y = pp[,19],use = "complete.obs")
par(mfrow=c(1,2))
hist(pp$REG_FEE,col="blue")
hist(sqrt(pp$REG_FEE),col="red")
ggplot(data=pp,aes(x=REG_FEE/1000,y=SALES_PRICE/1000))+geom_point(size=1,shape=15,color="blue")+geom_smooth(method=lm,se=FALSE,fullrange=TRUE)
pp$Guide_val<-pp$REG_FEE/0.01
summary(pp$Guide_val)
ggplot(data=pp,aes(y=Guide_val/1000,x=total_yrs/365,col=INT_SQFT))+geom_jitter(size=1,shape=15)
summary(pp$COMMIS)
cor(x =pp[,21],y = pp[,20],use = "complete.obs")
par(mfrow=c(1,2))
hist(pp$COMMIS,col="blue")
hist(sqrt(pp$COMMIS),col="red")
ggplot(data=pp,aes(x=COMMIS/1000,y=SALES_PRICE/1000))+geom_point(size=1,shape=15,color="red")+geom_smooth(method=lm,se=FALSE,fullrange=TRUE)
pp$Stamp_duty<-pp$Guide_val*0.08
summary(pp$Stamp_duty)
ggplot(data=pp,aes(y=Guide_val/1000,x=total_yrs/365,col=INT_SQFT))+geom_jitter(size=1,shape=15)
pp$oth_chgs<-apply(pp[,c(19,20,26)],MARGIN = 1,sum)
summary(pp$oth_chgs)
summary(pp$SALES_PRICE)
par(mfrow=c(1,2))
hist(pp$SALES_PRICE,col="red")
hist(sqrt(pp$SALES_PRICE),col="blue")
summary(pp$total_yrs)
par(mfrow=c(1,2))
hist(pp$total_yrs,col="blue")
hist(sqrt(pp$total_yrs),col="red")
YRSP<-ggplot(data=pp,aes(x=total_yrs/365,y=SALES_PRICE/1000))+geom_point(size=1,shape=15,color="blue")+geom_smooth(method=lm,se=FALSE,color="darkred")
YRCO<-ggplot(data=pp,aes(x=total_yrs/365,y=COMMIS/1000))+geom_point(size=1,shape=15,color="red")+geom_smooth(method=lm,se=FALSE)
grob1<-list(YRSP,YRCO)
marrangeGrob(grob1,nrow = 1,ncol =2 )
library(caret)
#pp_cplot<-cplot(data = pp[,-21])
#findCorrelation(pp_cplot,cutoff = 0.6,names = TRUE)
pp_back<-pp
pp<-pp_back
pp<-pp[,-c(3,10,15:17,19,24,25,26)]
pp$SALES_PRICE<-sqrt(pp$SALES_PRICE)
pp$SALES_PRICE<-(pp$SALES_PRICE)^2
bin_insq<-cut(pp$INT_SQFT,labels=1:4,breaks=c(0,1000,1500,2000,2500),ordered_result=FALSE)
pp$bin_insq<-bin_insq
##Binning distance from the main road
bin_dist<-cut(pp$DIST_MAINROAD,labels=1:4,breaks=c(-1,50,100,150,200),ordered_result=FALSE)
pp$bin_dist<-bin_dist
##Binning total yrs
bin_ttl_yrs<-cut(pp$total_yrs/365,labels=1:3,breaks=c(0,20,40,55),ordered_result=FALSE)
pp$bin_ttl_yrs<-bin_ttl_yrs
##Binning commission
bin_comis<-cut(pp$COMMIS/1000,labels=1:3,breaks=c(0,75,150,525),ordered_result=FALSE)
#MZ_temp<-pp %>% mutate(MZZONE=ifelse(MZZONE=="A"|MZZONE=="C"|MZZONE=="I",yes="others",no=MZZONE))
#pp$AREA<-as.character(pp$AREA)
##pp<-pp %>% mutate(AREA=ifelse(AREA=="Adyar"|AREA=="Chrompet",yes="ADC",no=AREA))
##pp<-pp%>% mutate(AREA=ifelse(AREA=="Anna Nagar"|AREA=="T Nagar",yes="ANT",no=AREA))
#AR_temp$AREA<-as.factor(AR_temp$AREA)
#pp$AREA<-as.factor(pp$AREA)
pp$ARBT<-interaction(pp$AREA,pp$BUILDTYPE)
pp$INBT<-interaction(pp$BUILDTYPE,pp$bin_insq)
pp$TRBT<-interaction(pp$BUILDTYPE,pp$N_ROOM)
pp$BRBT<-interaction(pp$BUILDTYPE,pp$N_BEDROOM)
pp$ARBR<-interaction(pp$AREA,pp$N_ROOM)
pp$CMBR<-interaction(bin_comis,pp$N_ROOM)
dmy_pp<-dummyVars(data=pp,formula =~ARBR,levelsOnly = TRUE,fullRank = TRUE)
pp_dmy_pre<-predict(dmy_pp,pp)
pp<-cbind(pp[,-26],pp_dmy_pre)
dmy_rm<-nearZeroVar(x = pp,freqCut = 100/0,names = FALSE)
pp<-pp[,-c(dmy_rm)]
dmy_pp<-dummyVars(data=pp,formula =~CMBR,levelsOnly = TRUE,fullRank = TRUE)
pp_dmy_pre<-predict(dmy_pp,pp)
pp<-cbind(pp[,-26],pp_dmy_pre)
dmy_rm<-nearZeroVar(x = pp,freqCut = 100/0,names = FALSE)
pp<-pp[,-c(dmy_rm)]
pp_train<-pp[!is.na(pp$SALES_PRICE),]
pp_test<-pp[is.na(pp$SALES_PRICE),]
set.seed(290391)
tr_cntl=trainControl(method="cv",number=5)
lm_pp<- train(SALES_PRICE~.,data=pp_train,
method = "ridge",trControl=tr_cntl,preProcess=c("scale","center"))
lm_pp_pred<-predict(object = lm_pp,newdata = pp_test)
lm_pp
#submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=lm_pp_pred)
#write.csv(submitlasso, "submitlasso.csv",row.names = FALSE)
index=sample(x = nrow(pp_train),size = 5000)
X_train=pp_train[index,]
y_test=pp_train[-index,]
pred_train=predict(lm_pp,newdata = X_train[,-15])
RMSE(pred_train,obs = X_train$SALES_PRICE)
pred_test=predict(lm_pp,newdata = y_test[,-15])
RMSE(pred_test,obs = y_test$SALES_PRICE)
library(devtools)
#install_github("h2oai/h2o-3/h2o-r/ensemble/h2oEnsemble-package")
require(h2oEnsemble)
# h2o.init(nthreads = -1)
# h2o.removeAll()
#
# write.csv(X_train,file = 'Xtra.csv')
# write.csv(y_test,file = 'ytest.csv')
# tr1=h2o.importFile(path = 'Xtra.csv')
# tes1=h2o.importFile(path = 'ytest.csv')
# learner <- c("h2o.randomForest.wrapper",
#              "h2o.gbm.wrapper")
# metaLearner=c("h2o.gbm.wrapper")
#y='SALES_PRICE'
#setdiff(names(tr1),y)
# fit <- h2o.ensemble(x = 1:(ncol(tr1)-1), y = 'C57',
#                     training_frame = tr1,
#                     family = 'gaussian',
#                     learner = learner,
#                     metalearner = metaLearner,
#                     cvControl = list(V = 3))
#
# fit <- h2o.ensemble(x = 1:(ncol(train_frame.hex)-1), y = ncol(train_frame.hex),
#                     train_frame.hex, validation_frame=valid_frame.hex,
#                     family = "gaussian",
#                     learner = learner,
#                     metalearner = metalearner,
#                     cvControl = list(V = 5))
#
# pred=predict(object = fit,newdata = tes1)
# pred$pred
# as.data.frame(pred$pred)
# head(pred)
index=sample(x = nrow(pp_train),size = 5000)
X_train=pp_train[index,]
y_test=pp_train[-index,]
train<-X_train
test<-y_test
index<-sample(1:(dim(train)[1]), 0.2*dim(train)[1], replace=FALSE)
train_frame<-train[-index,]
valid_frame<-train[index,]
valid_predict<-valid_frame[,-c(which(names(valid_frame) %in% c('SALES_PRICE')))]
h2o.init()
train_frame.hex<-as.h2o(train_frame)
valid_frame.hex<-as.h2o(valid_frame)
valid_predict.hex<-as.h2o(valid_predict)
test.hex<-as.h2o(y_test)
nfolds <- 5
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=10,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=100,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=200,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
pp_temp1$PRT_ID
pred <- predict(mY_deepLearning,pp_test)
pp_test.hex=as.h2o(x = pp_test)
pred <- predict(mY_deepLearning,pp_test.hex)
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
write.csv(submitlasso, "sub_saurabh3.csv",row.names = FALSE)
setwd("C:\\Users\\nirva\\IdeaProjects\\Analytics Vidhya")
write.csv(submitlasso, "sub_saurabh3.csv",row.names = FALSE)
write.csv(submitlasso, "freak_urabh3.csv",row.names = FALSE)
setwd("C:\\Users\\nirva\\IdeaProjects\\Analytics Vidhya")
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
write.csv(submitlasso, "sub_saurabh2.csv",row.names = FALSE)
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
write.csv(submitlasso, "freak_urabh3.csv",row.names = FALSE)
pred <- predict(mY_deepLearning,pp_test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=200,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,pp_test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
h2o.removeAll()
index=sample(x = nrow(pp_train),size = 5000)
X_train=pp_train[index,]
y_test=pp_train[-index,]
train<-X_train
test<-y_test
index<-sample(1:(dim(train)[1]), 0.2*dim(train)[1], replace=FALSE)
train_frame<-train[-index,]
valid_frame<-train[index,]
valid_predict<-valid_frame[,-c(which(names(valid_frame) %in% c('SALES_PRICE')))]
train_frame.hex<-as.h2o(train_frame)
valid_frame.hex<-as.h2o(valid_frame)
valid_predict.hex<-as.h2o(valid_predict)
test.hex<-as.h2o(y_test)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=200,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,pp_test.hex)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
pp_test.hex=as.h2o(pp_test)
pred <- predict(mY_deepLearning,pp_test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=500,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
pp_temp1$PRT_ID
length(as.integer(as.matrix(pred$pred['predict'])))
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
length(pp_temp1$PRT_ID)
length(pp_temp$PRT_ID)
pp_test
length(pp_test$AREA)
length(pp_temp1$PRT_ID)
length(pp_test$AREA)
length(pp_temp1$PRT_ID)
pp_test.hex=as.h2o(pp_test)
length(pp_test.hex)
length(pp_test.hex[,1])
pred <- predict(mY_deepLearning,pp_test.hex)
length(as.integer(as.matrix(pred$pred['predict'])))
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
write.csv(submitlasso, "deep3.csv",row.names = FALSE)
as.integer(as.matrix(pred$pred['predict']))
submitlasso
write.csv(submitlasso, "deep3.csv",row.names = FALSE)
setwd("C:\\Users\\nirva\\IdeaProjects\\Analytics Vidhya")
write.csv(submitlasso, "deep3.csv",row.names = FALSE)
getwd()
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=1000,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=200,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(5),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(15),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(20),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(15),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
pred <- predict(mY_deepLearning,pp_test.hex)
length(as.integer(as.matrix(pred$pred['predict'])))
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
setwd("C:\\Users\\nirva\\IdeaProjects\\Analytics Vidhya")
getwd()
pred <- predict(mY_deepLearning,pp_test.hex)
length(as.integer(as.matrix(pred$pred['predict'])))
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
write.csv(submitlasso, "deep3.csv",row.names = FALSE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(15),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(15),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Random",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(15),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
mY_deepLearning <- h2o.deeplearning(x = names(train_frame.hex)[-15],
y = 'SALES_PRICE',
training_frame  = train_frame.hex,
nfolds = 5,
fold_assignment = "Modulo",
model_id="dl_model_faster",
validation_frame=valid_frame.hex,
hidden=c(15),                  ## small network, runs faster
epochs=300,                      ## hopefully converges earlier...
#score_validation_samples=10000,      ## sample the validation dataset (faster)
stopping_rounds=2,
stopping_metric = 'RMSE', ## could be "MSE","logloss","r2"
stopping_tolerance=0.01
)
pred <- predict(mY_deepLearning,test.hex)
RMSE(as.integer(as.matrix(pred$pred['predict'])),y_test$SALES_PRICE)
setwd("C:\\Users\\nirva\\IdeaProjects\\Analytics Vidhya")
getwd()
pred <- predict(mY_deepLearning,pp_test.hex)
length(as.integer(as.matrix(pred$pred['predict'])))
submitlasso <- data.frame(PRT_ID=pp_temp1$PRT_ID,SALES_PRICE=as.integer(as.matrix(pred$pred['predict'])))
write.csv(submitlasso, "sub53.csv",row.names = FALSE)
write.csv(submitlasso, "sub5.csv",row.names = FALSE)
